package org.example.utils;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class StatisticsService {

    private static StatisticsService instance;

    private final AtomicLong totalGeneratedIds;
    private final ConcurrentHashMap<String, AtomicInteger> idsGeneratedByComponent;
    private final ConcurrentHashMap<String, Set<Long>> idsAssignedToEntityType;
    private final ConcurrentHashMap<String, AtomicInteger> taskExecutionCounts;
    private final ConcurrentHashMap<String, ConcurrentHashMap<String, AtomicInteger>> threadTaskExecutionCounts;

    private StatisticsService() {
        totalGeneratedIds = new AtomicLong(0);
        idsGeneratedByComponent = new ConcurrentHashMap<>();
        idsAssignedToEntityType = new ConcurrentHashMap<>();
        taskExecutionCounts = new ConcurrentHashMap<>();
        threadTaskExecutionCounts = new ConcurrentHashMap<>();
    }

    public static synchronized StatisticsService getInstance() {
        if (instance == null) {
            instance = new StatisticsService();
        }
        return instance;
    }

    public void recordIdGenerated(String componentName) {
        totalGeneratedIds.incrementAndGet();
        idsGeneratedByComponent.computeIfAbsent(componentName, k -> new AtomicInteger(0)).incrementAndGet();
    }

    public void recordIdAssigned(String entityType, long id) {
        idsAssignedToEntityType.computeIfAbsent(entityType, k -> ConcurrentHashMap.newKeySet()).add(id);
    }

    public void recordTaskExecution(String taskName, String threadPoolName, String threadName) {
        taskExecutionCounts.computeIfAbsent(taskName, k -> new AtomicInteger(0)).incrementAndGet();
        threadTaskExecutionCounts.computeIfAbsent(threadPoolName, k -> new ConcurrentHashMap<>())
                .computeIfAbsent(threadName, k -> new AtomicInteger(0)).incrementAndGet();
    }

    public String getStatistics() {
        StringBuilder sb = new StringBuilder();
        sb.append("--- Statistics ---").append(System.lineSeparator());
        sb.append("Total IDs Generated: ").append(totalGeneratedIds.get()).append(System.lineSeparator());
        sb.append(System.lineSeparator());

        sb.append("IDs Generated by Component:").append(System.lineSeparator());
        if (idsGeneratedByComponent.isEmpty()) {
            sb.append("  None").append(System.lineSeparator());
        } else {
            for (Map.Entry<String, AtomicInteger> entry : idsGeneratedByComponent.entrySet()) {
                sb.append("  - ").append(entry.getKey()).append(": ").append(entry.getValue().get()).append(System.lineSeparator());
            }
        }
        sb.append(System.lineSeparator());

        sb.append("Number of IDs Assigned to Entity Type:").append(System.lineSeparator());
        if (idsAssignedToEntityType.isEmpty()) {
            sb.append("  None").append(System.lineSeparator());
        } else {
            for (Map.Entry<String, Set<Long>> entry : idsAssignedToEntityType.entrySet()) {
                sb.append("  - ").append(entry.getKey()).append(": ").append(entry.getValue().size()).append(System.lineSeparator());
            }
        }
        sb.append(System.lineSeparator());

        sb.append("Task Execution Counts:").append(System.lineSeparator());
        if (taskExecutionCounts.isEmpty()) {
            sb.append("  None").append(System.lineSeparator());
        } else {
            for (Map.Entry<String, AtomicInteger> entry : taskExecutionCounts.entrySet()) {
                sb.append("  - ").append(entry.getKey()).append(": ").append(entry.getValue().get()).append(System.lineSeparator());
            }
        }
        sb.append(System.lineSeparator());

        sb.append("Thread Task Execution Counts:").append(System.lineSeparator());
        if (threadTaskExecutionCounts.isEmpty()) {
            sb.append("  None").append(System.lineSeparator());
        } else {
            for (Map.Entry<String, ConcurrentHashMap<String, AtomicInteger>> poolEntry : threadTaskExecutionCounts.entrySet()) {
                sb.append("  Thread Pool: ").append(poolEntry.getKey()).append(System.lineSeparator());
                if (poolEntry.getValue().isEmpty()) {
                    sb.append("    No tasks executed by threads in this pool.").append(System.lineSeparator());
                } else {
                    for (Map.Entry<String, AtomicInteger> threadEntry : poolEntry.getValue().entrySet()) {
                        sb.append("    - Thread: ").append(threadEntry.getKey()).append(", Executed Tasks: ").append(threadEntry.getValue().get()).append(System.lineSeparator());
                    }
                }
            }
        }
        sb.append("--- End of Statistics ---").append(System.lineSeparator());
        return sb.toString();
    }

    public void reset() {
        totalGeneratedIds.set(0);
        idsGeneratedByComponent.clear();
        idsAssignedToEntityType.clear();
        taskExecutionCounts.clear();
        threadTaskExecutionCounts.clear();
    }
}
